{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "VPCCIDR": {
      "Description": "CIDR Block for the VPC you are creating.",
      "Type": "String",
      "Default": "10.0.0.0/16",
      "AllowedPattern": "[a-zA-Z0-9]+\\..+"
    },
    "RemoteAccessCIDR": {
      "Description": "IP CIDR from where you could SSH into MongoDB cluster via NAT",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "ClusterReplicaSetCount": {
      "Description": "Number of Replica Set Members. Choose 1 or 3",
      "Type": "String",
      "Default": "1",
      "AllowedValues": [
        "1",
        "3"
      ]
    },
    "ClusterShardCount": {
      "Description": "Number of Shards [0,1,2,3]. 0==No Sharding. Set to > 1 for Sharding",
      "Type": "String",
      "Default": "0",
      "AllowedValues": [
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "MongoDBVersion": {
      "Description": "MongoDB version",
      "Type": "String",
      "Default": "3.0",
      "AllowedValues": [
        "3.0",
        "2.6"
      ]
    },
    "ShardsPerNode": {
      "Description": "Number of Micro Shards Per Node",
      "Type": "String",
      "Default": "1",
      "AllowedValues": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16"
      ]
    },
    "BuildBucket": {
      "Description": "Main Bucket where the templates/scripts are installed. ${Bucket}/{templates,scripts} should be valid.",
      "Type": "String",
      "Default": "scratch_bucket/mongodb11"
    },
    "PublicSubnet": {
      "Description": "CIDR Block for the Public DMZ Subnet located in the new VPC.",
      "Type": "String",
      "Default": "10.0.1.0/24",
      "AllowedPattern": "[a-zA-Z0-9]+\\..+"
    },
    "PrimaryReplicaSubnet": {
      "Description": "Private Subnet where Primary Replica Set will be deployed.",
      "Type": "String",
      "Default": "10.0.2.0/24",
      "AllowedPattern": "[a-zA-Z0-9]+\\..+"
    },
    "SecondaryReplicaSubnet0": {
      "Description": "Private Subnet of Secondary Replica Set 0 (Applicable only when ClusterReplicaSetCount >= 2) ",
      "Type": "String",
      "Default": "10.0.3.0/24",
      "AllowedPattern": "[a-zA-Z0-9]+\\..+"
    },
    "SecondaryReplicaSubnet1": {
      "Description": "Private Subnet of Secondary Replica Set 1 (Applicable only when ClusterReplicaSetCount == 3) ",
      "Type": "String",
      "Default": "10.0.4.0/24",
      "AllowedPattern": "[a-zA-Z0-9]+\\..+"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "home",
      "Description": "Name of an existing EC2 KeyPair. MondoDB instances will launch with this KeyPair."
    },
    "NATInstanceType": {
      "Description": "Amazon EC2 instance type for the NAT Instances.",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t2.small",
        "t2.medium"
      ]
    },
    "VolumeSize": {
      "Type": "String",
      "Description": "EBS Volume Size (data) to be attached to node in GBs",
      "Default": "400"
    },
    "VolumeType": {
      "Type": "String",
      "Description": "EBS Volume Type (data) to be attached to node in GBs [io1,gp2]",
      "Default": "gp2",
      "AllowedValues": [
        "gp2",
        "io1"
      ]
    },
    "Iops": {
      "Type": "String",
      "Description": "Iops of EBS volume when io1 type is chosen. Otherwise ignored",
      "Default": "100"
    },
    "ConfigServerInstanceType": {
      "Description": "Amazon EC2 instance type for the Config Server",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ]
    },
    "NodeInstanceType": {
      "Description": "Amazon EC2 instance type for the MongoDB nodes.",
      "Type": "String",
      "Default": "m3.medium",
      "AllowedValues": [
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ]
    }
  },
  "Conditions": {
    "UsePIops": {
      "Fn::Equals": [
        {
          "Ref": "VolumeType"
        },
        "io1"
      ]
    },
    "UseGP2": {
      "Fn::Equals": [
        {
          "Ref": "VolumeType"
        },
        "gp2"
      ]
    },
    "CreateSingleReplicaSet": {
      "Fn::Equals": [
        {
          "Ref": "ClusterReplicaSetCount"
        },
        "1"
      ]
    },
    "CreateThreeReplicaSet": {
      "Fn::Equals": [
        {
          "Ref": "ClusterReplicaSetCount"
        },
        "3"
      ]
    },
    "CreateNoShard": {
      "Fn::Equals": [
        {
          "Ref": "ClusterShardCount"
        },
        "0"
      ]
    },
    "CreateConfigServers": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ClusterShardCount"
            },
            "0"
          ]
        }
      ]
    },
    "CreateMinOneShard": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ClusterShardCount"
            },
            "0"
          ]
        }
      ]
    },
    "CreateMinTwoShards": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            "2",
            {
              "Ref": "ClusterShardCount"
            }
          ]
        },
        {
          "Fn::Equals": [
            "3",
            {
              "Ref": "ClusterShardCount"
            }
          ]
        }
      ]
    },
    "CreateMinThreeShards": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            "3",
            {
              "Ref": "ClusterShardCount"
            }
          ]
        },
        {
          "Fn::Equals": [
            "3",
            {
              "Ref": "ClusterShardCount"
            }
          ]
        }
      ]
    },
    "UsePIopsAndCreateNoShard": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "CreateNoShard"
        }
      ]
    },
    "UsePIopsAndCreateMinOneShard": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "CreateMinOneShard"
        }
      ]
    },
    "UsePIopsAndCreateMinTwoShards": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "CreateMinTwoShards"
        }
      ]
    },
    "UsePIopsAndCreateMinThreeShards": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "CreateMinThreeShards"
        }
      ]
    },
    "UseGP2AndCreateMinThreeShards": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "CreateMinThreeShards"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode0": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode0"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode1": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode1"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode00": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode00"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode10": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode10"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode11": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode11"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode01": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode01"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode21": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode21"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode20": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode20"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode10": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode10"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode11": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode11"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode20": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode20"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode21": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode21"
        }
      ]
    },
    "UseGP2AndCreateNoShard": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "CreateNoShard"
        }
      ]
    },
    "UseGP2AndCreateMinOneShard": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "CreateMinOneShard"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode0": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode0"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode1": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode1"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode00": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode00"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode01": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode01"
        }
      ]
    },
    "UseGP2AndCreateMinTwoShards": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "CreateMinTwoShards"
        }
      ]
    },
    "IfSecondaryReplicaNode00": {
      "Fn::And": [
        {
          "Condition": "CreateMinOneShard"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode0": {
      "Fn::And": [
        {
          "Condition": "CreateNoShard"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode1": {
      "Fn::And": [
        {
          "Condition": "CreateNoShard"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode01": {
      "Fn::And": [
        {
          "Condition": "CreateMinOneShard"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode10": {
      "Fn::And": [
        {
          "Condition": "CreateMinTwoShards"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode11": {
      "Fn::And": [
        {
          "Condition": "CreateMinTwoShards"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode20": {
      "Fn::And": [
        {
          "Condition": "CreateMinThreeShards"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode21": {
      "Fn::And": [
        {
          "Condition": "CreateMinThreeShards"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    }
  },
  "Mappings": {
    "InstanceTypeArchFromNode": {
      "m3.medium": {
        "Arch": "64HVM"
      },
      "m3.large": {
        "Arch": "64HVM"
      },
      "m3.xlarge": {
        "Arch": "64HVM"
      },
      "m3.2xlarge": {
        "Arch": "64HVM"
      },
      "c3.large": {
        "Arch": "64HVM"
      },
      "c3.xlarge": {
        "Arch": "64HVM"
      },
      "c3.2xlarge": {
        "Arch": "64HVM"
      },
      "c3.4xlarge": {
        "Arch": "64HVM"
      },
      "c3.8xlarge": {
        "Arch": "64HVM"
      },
      "r3.large": {
        "Arch": "64HVM"
      },
      "r3.xlarge": {
        "Arch": "64HVM"
      },
      "r3.2xlarge": {
        "Arch": "64HVM"
      },
      "r3.4xlarge": {
        "Arch": "64HVM"
      },
      "r3.8xlarge": {
        "Arch": "64HVM"
      },
      "i2.xlarge": {
        "Arch": "64HVM"
      },
      "i2.2xlarge": {
        "Arch": "64HVM"
      },
      "i2.4xlarge": {
        "Arch": "64HVM"
      },
      "i2.8xlarge": {
        "Arch": "64HVM"
      }
    },
    "RegionImageZone": {
      "eu-west-1": {
        "64HVM": "ami-892fe1fe"
      },
      "sa-east-1": {
        "64HVM": "ami-c9e649d4"
      },
      "us-east-1": {
        "64HVM": "ami-76817c1e"
      },
      "ap-northeast-1": {
        "64HVM": "ami-29dc9228"
      },
      "us-west-2": {
        "64HVM": "ami-d13845e1"
      },
      "us-west-1": {
        "64HVM": "ami-f0d3d4b5"
      },
      "ap-southeast-1": {
        "64HVM": "ami-a6b6eaf4"
      },
      "ap-southeast-2": {
        "64HVM": "ami-d9fe9be3"
      }
    },
    "AWSNATAMI": {
      "us-west-2": {
        "AMI": "ami-bb69128b"
      },
      "sa-east-1": {
        "AMI": "ami-b972dba4"
      },
      "ap-northeast-1": {
        "AMI": "ami-55c29e54"
      },
      "eu-west-1": {
        "AMI": "ami-5b60b02c"
      },
      "us-east-1": {
        "AMI": "ami-6e9e4b06"
      },
      "us-west-1": {
        "AMI": "ami-2b2b296e"
      },
      "ap-southeast-2": {
        "AMI": "ami-a164029b"
      },
      "ap-southeast-1": {
        "AMI": "ami-d482da86"
      },
      "eu-central-1": {
        "AMI": "ami-ae380eb3"
      }
    },
    "InstanceTypeArch": {
      "t2.micro": {
        "Arch": "64HVM"
      },
      "m3.medium": {
        "Arch": "64HVM"
      },
      "m3.large": {
        "Arch": "64HVM"
      },
      "m3.xlarge": {
        "Arch": "64HVM"
      },
      "m3.2xlarge": {
        "Arch": "64HVM"
      },
      "c3.large": {
        "Arch": "64HVM"
      },
      "c3.xlarge": {
        "Arch": "64HVM"
      },
      "c3.2xlarge": {
        "Arch": "64HVM"
      },
      "c3.4xlarge": {
        "Arch": "64HVM"
      },
      "c3.8xlarge": {
        "Arch": "64HVM"
      },
      "r3.large": {
        "Arch": "64HVM"
      },
      "r3.xlarge": {
        "Arch": "64HVM"
      },
      "r3.2xlarge": {
        "Arch": "64HVM"
      },
      "r3.4xlarge": {
        "Arch": "64HVM"
      },
      "r3.8xlarge": {
        "Arch": "64HVM"
      },
      "i2.xlarge": {
        "Arch": "64HVM"
      },
      "i2.2xlarge": {
        "Arch": "64HVM"
      },
      "i2.4xlarge": {
        "Arch": "64HVM"
      },
      "i2.8xlarge": {
        "Arch": "64HVM"
      }
    },
    "AMI": {
      "eu-west-1": {
        "64HVM": "ami-8723aef0"
      },
      "sa-east-1": {
        "64HVM": "ami-a59925b8"
      },
      "us-east-1": {
        "64HVM": "ami-ee6e2a86"
      },
      "ap-northeast-1": {
        "64HVM": "ami-1e86981f"
      },
      "us-west-2": {
        "64HVM": "ami-c1c39af1"
      },
      "us-west-1": {
        "64HVM": "ami-5a90891f"
      },
      "ap-southeast-1": {
        "64HVM": "ami-94bb90c6"
      },
      "ap-southeast-2": {
        "64HVM": "ami-d70773ed"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {
            "Key": "Application",
            "Value": "MongoDB on AWS"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "DMZSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnet"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "NAT"
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        }
      }
    },
    "NATInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "NAT Instance (Public Subnet)"
          }
        ],
        "InstanceType": {
          "Ref": "NATInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "NATInterface"
            },
            "DeviceIndex": "0"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AWSNATAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        }
      }
    },
    "NATEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NATInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "DMZSubnet"
        },
        "Description": "External interface for the NAT instance",
        "GroupSet": [
          {
            "Ref": "NATSecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "AssociateInterfaceNAT": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NATEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "NATInterface"
        }
      }
    },
    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "8",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "PrimaryReplicaSubnet"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SecondaryReplicaSubnet0"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "8",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SecondaryReplicaSubnet1"
            }
          }
        ]
      }
    },
    "DMZRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "NAT"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "DMZRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "DMZSubnet"
        },
        "RouteTableId": {
          "Ref": "DMZRouteTable"
        }
      }
    },
    "InboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutBoundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrimaryNodeSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrimaryReplicaSubnet"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "MongoDB"
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        }
      },
      "DependsOn": "VPC"
    },
    "PrimaryNodeRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "MongoDB"
          }
        ]
      },
      "DependsOn": "VPC"
    },
    "PrimaryNodeRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrimaryNodeRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATInstance"
        }
      },
      "DependsOn": "VPC"
    },
    "PrimaryPublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      },
      "DependsOn": "VPC"
    },
    "PrimaryNodeSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrimaryNodeSubnet"
        },
        "RouteTableId": {
          "Ref": "PrimaryNodeRouteTable"
        }
      },
      "DependsOn": "VPC"
    },
    "PrimaryInboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "89",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "DependsOn": "VPC"
    },
    "PrimaryOutBoundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "88",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "DependsOn": "VPC"
    },
    "Secondary0NodeSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "SecondaryReplicaSubnet0"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "MongoDB"
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        }
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary0NodeRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "MongoDB"
          }
        ]
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary0NodeRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "Secondary0NodeRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATInstance"
        }
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary0PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary0NodeSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Secondary0NodeSubnet"
        },
        "RouteTableId": {
          "Ref": "Secondary0NodeRouteTable"
        }
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary0InboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "91",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary0OutBoundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "90",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary1NodeSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "SecondaryReplicaSubnet1"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "MongoDB"
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        }
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary1NodeRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": "MongoDB"
          }
        ]
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary1NodeRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "Secondary1NodeRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATInstance"
        }
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary1PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary1NodeSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Secondary1NodeSubnet"
        },
        "RouteTableId": {
          "Ref": "Secondary1NodeRouteTable"
        }
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary1InboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "93",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    },
    "Secondary1OutBoundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "92",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "Condition": "CreateThreeReplicaSet",
      "DependsOn": "VPC"
    }
  }
}
